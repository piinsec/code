from flask import Blueprint, render_template, request, redirect, url_for, make_response
from flask_login import login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from .models import db, User, ScanResult
import socket, requests
import nmap

main = Blueprint('main', __name__)

@main.route('/')
def index():
    return render_template('index.html')


# ---------- AUTH ----------
@main.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = generate_password_hash(request.form['password'])
        user = User(username=username, password=password)
        db.session.add(user)
        db.session.commit()
        return redirect(url_for('main.login'))
    return render_template('register.html')

@main.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        user = User.query.filter_by(username=request.form['username']).first()
        if user and check_password_hash(user.password, request.form['password']):
            login_user(user)
            return redirect(url_for('main.index'))
        else:
            return "Invalid credentials"
    return render_template('login.html')

@main.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('main.login'))


# ---------- TOOLS ----------
@main.route('/port-scanner', methods=['GET', 'POST'])
@login_required
def port_scanner():
    result = []
    if request.method == 'POST':
        target = request.form['target']
        port_range = request.form['port_range']
        use_nmap = 'use_nmap' in request.form

        try:
            start_port, end_port = map(int, port_range.split('-'))
            port_spec = f"{start_port}-{end_port}"

            if use_nmap:
                scanner = nmap.PortScanner()
                scanner.scan(hosts=target, arguments=f'-p {port_spec} --open')
                for host in scanner.all_hosts():
                    for proto in scanner[host].all_protocols():
                        ports = scanner[host][proto].keys()
                        result = sorted(ports)
            else:
                for port in range(start_port, end_port + 1):
                    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    sock.settimeout(0.5)
                    try:
                        sock.connect((target, port))
                        result.append(port)
                    except:
                        pass
                    finally:
                        sock.close()

            new_result = ScanResult(
                user_id=current_user.id,
                scan_type='nmap' if use_nmap else 'port',
                target=target,
                result=str(result)
            )
            db.session.add(new_result)
            db.session.commit()

        except Exception as e:
            result = [f"Error: {str(e)}"]

    return render_template('port_scanner.html', result=result)


@main.route('/subdomain-finder', methods=['GET', 'POST'])
@login_required
def subdomain_finder():
    result = ''
    if request.method == 'POST':
        domain = request.form['domain']
        subdomains = ['www', 'mail', 'ftp', 'test', 'dev']
        found = []
        for sub in subdomains:
            url = f"http://{sub}.{domain}"
            try:
                r = requests.get(url, timeout=2)
                found.append(url)
            except:
                pass
        result = f"Subdomains found: {found}"
        db.session.add(ScanResult(
            user_id=current_user.id,
            scan_type='subdomain',
            target=domain,
            result=result
        ))
        db.session.commit()
    return render_template('subdomain_finder.html', result=result)


@main.route('/dir-bruteforce', methods=['GET', 'POST'])
@login_required
def dir_bruteforce():
    result = ''
    if request.method == 'POST':
        url = request.form['url']
        wordlist = ['admin', 'login', 'dashboard', 'config']
        found = []
        for word in wordlist:
            target_url = f"{url}/{word}"
            try:
                r = requests.get(target_url)
                if r.status_code == 200:
                    found.append(target_url)
            except:
                pass
        result = f"Directories found: {found}"
        db.session.add(ScanResult(
            user_id=current_user.id,
            scan_type='dir-brute',
            target=url,
            result=result
        ))
        db.session.commit()
    return render_template('dir_bruteforce.html', result=result)


@main.route('/history')
@login_required
def history():
    scans = ScanResult.query.filter_by(user_id=current_user.id).order_by(ScanResult.id.desc()).all()
    return render_template('history.html', scans=scans)


@main.route('/export-portscan', methods=['POST'])
@login_required
def export_portscan():
    data = request.form['data']
    response = make_response(data.replace(',', '\n'))
    response.headers['Content-Disposition'] = 'attachment; filename=portscan_results.txt'
    response.headers['Content-Type'] = 'text/plain'
    return response
